service: wisaw

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
# Enable auto-packing of external modules
custom:
  enabled:
    prod: true
    test: false

  webpackIncludeModules: true
  bucket_name: wisaw-img-${opt:stage} #this is the only place where the bucket name is defined -- change it here if ever have to

  stageVariables:
    bucketName: ${self:custom.bucket_name}
    # endpoint: {"Fn::Join": ["", ["https://", { "Fn::GetAtt": "CloudFrontEndpoint.DomainName" }, "/"]]}

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  memorySize: 3008
  timeout: 30
  versionFunctions: false # optional, default is true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${self:custom.bucket_name}"
        - "arn:aws:s3:::${self:custom.bucket_name}/*"
  environment:
    DATABASE_URL: ${file(.env.${opt:stage}.js):config.DATABASE_URL}
    HOST: ${file(.env.${opt:stage}.js):config.HOST}
    IMAGE_BUCKET: ${self:custom.bucket_name}
    STAGE: ${opt:stage}


functions:
  helloWorldGet: # just for testing purposes
    handler: api/src/controllers/hello_world.main
    description: greetings message for world
    events:
      - http:
          path: hello
          method: get
          private: false

  abuseReportPost: # http endpoint
    handler: api/src/controllers/abuseReports/create.main
    description: create an abuse report record
    events:
      - http:
          path: abusereport
          method: post
          private: false
          request:
            parameters:
              application/json: '{"uuid":{"type":"string"}}'

  contactFormPost: # http endpoint
    handler: api/src/controllers/contactForms/create.main
    description: create contact form record
    events:
      - http:
          path: contactform
          method: post
          private: false

  photosCleanupGet: # http endpoint
    handler: api/src/controllers/photos/cleanup.main
    description: cleaning up old photos
    events:
      - http:
          path: photos/cleanup
          method: get
          private: false

  photosCleanupSchedule: # the same as above (reusing the same function), but is invoked by a scheduler
    handler: api/src/controllers/photos/cleanup.main
    description: cleaning up abuse report periodically once an hour
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: ${self:custom.enabled.${opt:stage, self:provider.stage}}

  photosFeedPost: # http endpoint
    handler: api/src/controllers/photos/feed.main
    description: photos feed
    events:
      - http:
          path: photos/feed
          method: post
          private: false
  photosFeedByDatePost: # http endpoint
    handler: api/src/controllers/photos/feed.byDate
    description: retreive photos by date
    events:
      - http:
          path: photos/feedByDate
          method: post
          private: false

  photosPost: # http endpoint, which creates a record in DB, generaes unique photo id and then genertes upload URL to eb used for direct s3 upload
    handler: api/src/controllers/photos/create.main
    description: ('C'RUD) - photo
    events:
      - http:
          path: photos
          method: post
          private: false
          cors: true

  photosActivate: # http endpoint
    handler: api/src/controllers/photos/activate.main
    description: make existing photo active
    events:
      - http:
          path: photos/{id}/activate
          method: put
          private: false

  photosDeActivate: # http endpoint
    handler: api/src/controllers/photos/deactivate.main
    description: make existing photo inactive
    events:
      - http:
          path: photos/{id}/deactivate
          method: put
          private: false

  photosLike: # http endpoint
    handler: api/src/controllers/photos/like.main
    description: like existing photo
    events:
      - http:
          path: photos/{id}/like
          method: put
          private: false

  photosThumbsGenerate:
    handler: api/src/controllers/photos/createThumb.main
    description: 'generates *.thumb image when ever a new image is uploaded to a bucket'
    # memorySize: 300 # fails with the default options -- must give more memory
    events:
      - s3: # this will create the bucket
          bucket: ${self:custom.bucket_name}
          event: s3:ObjectCreated:*

  photosRemoveS3Trigger:
    handler: api/src/controllers/photos/removeTrigger.main
    description: 'removes photo record from DB when it is removed from S3 bucket'
    events:
      - s3:
          bucket: ${self:custom.bucket_name}
          event: s3:ObjectRemoved:*

  photosGet: # http endpoint
    handler: api/src/controllers/photos/read.main
    description: (C'R'UD) - photo
    events:
      - http:
          path: photos/{id}
          method: get
          private: false

  photosDelete: # http endpoint
    handler: api/src/controllers/photos/delete.main
    description: (CRU'D') - photo
    events:
      - http:
          path: photos/{id}
          method: delete
          private: false

  cleanupAllGet: # http endpoint
    handler: api/src/controllers/photos/cleanupAll.main
    description: cleaning up all data (only enabled in test)
    events:
      - http:
          path: cleanup
          method: get
          private: false

resources:
  Resources:
    # https://serverless.com/blog/building-a-serverless-screenshot-service-with-lambda/
    # https://www.netlify.com/blog/2016/11/17/serverless-file-uploads/
    S3BucketWisawimgtest:
      Type: AWS::S3::Bucket
      Properties:
        # BucketName: wisaw-img-test-custom
        # AccessControl: PublicRead
        # CorsConfiguration:
        #   CorsRules:
        #   - AllowedMethods:
        #     - GET
        #     - PUT
        #     - POST
        #     - HEAD
        #     AllowedOrigins:
        #     - "*"
        #     AllowedHeaders:
        #     - "*"
        LifecycleConfiguration:
          Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: '1'

    S3BucketWisawimgprod:
      Type: AWS::S3::Bucket
      Properties:
        LifecycleConfiguration:
          Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: '1000'
