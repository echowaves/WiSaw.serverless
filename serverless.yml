service: wisaw

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  timeout: 30
  versionFunctions: false # optional, default is true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::wisaw-img-${opt:stage}/*"
  environment:
    DATABASE_URL: ${file(.env.${opt:stage}.js):config.DATABASE_URL}
    HOST: ${file(.env.${opt:stage}.js):config.HOST}
    IMAGE_BUCKET: wisaw-img-${opt:stage}


functions:
  helloWorldGet: # just for testing purposes
    handler: api/src/controllers/hello_world.main
    description: greetings message for world
    events:
      - http:
          path: hello
          method: get
          private: false

  abuseReportPost: # http endpoint
    handler: api/src/controllers/abuseReports/create.main
    description: create an abuse report record
    events:
      - http:
          path: abusereport
          method: post
          private: false
          request:
            parameters:
              application/json: '{"uuid":{"type":"string"}}'


  contactFormPost: # http endpoint
    handler: api/src/controllers/contactForms/create.main
    description: create contact form record
    events:
      - http:
          path: contactform
          method: post
          private: false

  photosCleanupGet: # http endpoint
    handler: api/src/controllers/photos/cleanup.main
    description: cleaning up old photos
    events:
      - http:
          path: photos/cleanup
          method: get
          private: false
  photosCleanupSchedule: # the same as above (reusing the same function), but is invoked by a scheduler
    handler: api/src/controllers/photos/cleanup.main
    description: cleaning up old photos periodically once an hour
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true

  photosFeedPost: # http endpoint
    handler: api/src/controllers/photos/feed.main
    description: photos feed
    memorySize: 1000 # need to allocate more memory
    events:
      - http:
          path: photos/feed
          method: post
          private: false

  photosPost: # http endpoint, which creates a record in DB, generaes unique photo id and then genertes upload URL to eb used for direct s3 upload
    handler: api/src/controllers/photos/create.main
    description: ('C'RUD) - photo
    # memorySize: 300 # need to allocate more memory for Jimp image processing
    events:
      - http:
          path: photos
          method: post
          private: false
          cors: true


  # photosThumbPost:
  #     handler: api/src/controllers/photos/createThumb.main
  #     events:
  #       # this event type will also create the screenshots bucket and trigger
  #       # the lambda function every time a file is uploaded (ObjectCreated)
  #       - s3:
  #           bucket: wisaw-img-${opt:stage}
  #           event: s3:ObjectCreated:*

  photosGet: # http endpoint
    handler: api/src/controllers/photos/read.main
    description: (C'R'UD) - photo
    events:
      - http:
          path: photos/{id}
          method: get
          private: false
  # photosThumbGet: # http endpoint
  #   handler: api/src/controllers/photos/thumb.main
  #   description: photos thumb image
  #   events:
  #     - http:
  #         path: photos/{id}/thumb
  #         method: get
  #         private: false
  # photosFullGet: # http endpoint
  #   handler: api/src/controllers/photos/full.main
  #   description: photos full image
  #   events:
  #     - http:
  #         path: photos/{id}/full
  #         method: get
  #         private: false
  photosDelete: # http endpoint
    handler: api/src/controllers/photos/delete.main
    description: (CRU'D') - photo
    events:
      - http:
          path: photos/{id}
          method: delete
          private: false


resources:
  Resources:
    # https://serverless.com/blog/building-a-serverless-screenshot-service-with-lambda/
    # https://www.netlify.com/blog/2016/11/17/serverless-file-uploads/
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: wisaw-img-${opt:stage}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
